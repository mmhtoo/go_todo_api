// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todos.sql

package database

import (
	"context"
	"time"
)

const deleteById = `-- name: DeleteById :exec
DELETE FROM todos WHERE
id = $1
`

func (q *Queries) DeleteById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteById, id)
	return err
}

const findAll = `-- name: FindAll :many
SELECT id, title, status, created_at, updated_at FROM todos
`

func (q *Queries) FindAll(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, findAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findById = `-- name: FindById :one
SELECT id, title, status, created_at, updated_at FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindById(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRowContext(ctx, findById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const save = `-- name: Save :one
INSERT INTO todos (title, status, created_at, updated_at)
VALUES ($1, $2, $3, $4)
RETURNING id, title, status, created_at, updated_at
`

type SaveParams struct {
	Title     string
	Status    string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) Save(ctx context.Context, arg SaveParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, save,
		arg.Title,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateById = `-- name: UpdateById :one
UPDATE todos
SET title = $1, status = $2, updated_at = NOW()
WHERE id = $3
RETURNING id, title, status, created_at, updated_at
`

type UpdateByIdParams struct {
	Title  string
	Status string
	ID     int32
}

func (q *Queries) UpdateById(ctx context.Context, arg UpdateByIdParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateById, arg.Title, arg.Status, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
